/* eslint-disable no-restricted-globals */
import { clientsClaim } from 'workbox-core';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { ExpirationPlugin } from 'workbox-expiration';

// Clients.claim() hace que el trabajador del servicio tome el control de la página
// cuando registra por primera vez un trabajador del servicio.
clientsClaim();

// Precache all of the assets generated by your build process.
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) =>
    request.mode === 'navigate' &&
    !url.pathname.startsWith('/_') &&
    !url.pathname.match(fileExtensionRegexp),
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// API
registerRoute(
  new RegExp('https://restcountries.eu/rest/v2/'),
  new NetworkFirst({
    cacheName: 'API',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [200],
      }),
    ],
  })
);

// Data
registerRoute(
  new RegExp('https://restcountries.eu/data'),
  new CacheFirst({
    cacheName: 'DataAPI',
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 7 * 24 * 60 * 60, // a Week
        maxEntries: 250,
      }),
      new CacheableResponsePlugin({
        statuses: [200],
      }),
    ],
  })
);

// Cache images with a Cache First strategy
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [200],
      }),
    ],
  })
);

registerRoute(
  new RegExp('/(manifest.json|service-worker.js)$'),
  new NetworkFirst({
    cacheName: 'pwa-resources',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [200],
      }),
    ],
  })
);

// con self.skipWaiting(); el service worker se activa apenas finaliza su instalación.
// y reemplaza a uno anterior para evitar que el usuario tenga que cerrar la página
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('[sw] Update the service-worker');
    self.skipWaiting();
  }
});
