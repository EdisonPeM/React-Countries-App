/* eslint-disable no-restricted-globals */
import { clientsClaim, setCacheNameDetails } from 'workbox-core';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute, NavigationRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { ExpirationPlugin } from 'workbox-expiration';

// Clients.claim() hace que el trabajador del servicio tome el control de la página
// cuando registra por primera vez un trabajador del servicio.
clientsClaim();

// Precaché Names
setCacheNameDetails({
  prefix: 'countries-app',
  suffix: 'v1',
  precache: 'precache',
});

// Precache all of the assets generated by your build process.
precacheAndRoute([
  ...self.__WB_MANIFEST,
  { url: '/favicon.ico', revision: 'ce9daba54d43cd0d35ca0a3c13ad7f8a' },
  { url: '/manifest.json', revision: '4b1eb3dc48c4e16d49db5b42298fe654' },
]);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const handler = createHandlerBoundToURL('/index.html');
const navigationRoute = new NavigationRoute(handler);
registerRoute(navigationRoute);

// Cache images with a Cache First strategy
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({ cacheName: 'images' })
);

// Cache pwa resources with a Network First strategy
// registerRoute(
//   '/service-worker.js',
//   new NetworkFirst({ cacheName: 'serviceWorker' })
// );

// Cache API requests with a Network First strategy
registerRoute(
  new RegExp('https://restcountries.eu/rest/v2/'),
  new NetworkFirst({
    cacheName: 'API',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [200],
      }),
    ],
  })
);

// Cache API requests with a Network First strategy
registerRoute(
  new RegExp('^https://\\w.tile.openstreetmap.org/\\d+/\\d+/\\d+.png$'),
  new NetworkFirst({
    cacheName: 'Maps',
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 7 * 24 * 60 * 60, // a Week
      }),
      new CacheableResponsePlugin({
        statuses: [200],
      }),
    ],
  })
);

// Cache API DATA requests with a Cache First strategy
registerRoute(
  new RegExp('https://restcountries.eu/data/'),
  new CacheFirst({
    cacheName: 'DataAPI',
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 7 * 24 * 60 * 60, // a Week
        maxEntries: 250,
      }),
      new CacheableResponsePlugin({
        statuses: [200],
      }),
    ],
  })
);

registerRoute(
  new RegExp('https://unpkg.com/'),
  new CacheFirst({ cacheName: 'CDNs' })
);

// con self.skipWaiting(); el service worker se activa apenas finaliza su instalación.
// y reemplaza a uno anterior para evitar que el usuario tenga que cerrar la página
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('[sw] Update the service-worker');
    self.skipWaiting();
  }
});
